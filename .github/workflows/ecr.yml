name: CI
on:
  push:
    branches:
      - master

jobs:
  cicd:
    name: CI
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to private ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and push Docker
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
      - name: Image digest
        run: |
          echo ${{ steps.docker_build.outputs.digest }}
      - name: Deploy new Image at Lambda
        run: aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_BUILDER }} --image-uri ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
      - name: Wait until Lambda function is updated
        run: aws lambda wait function-updated --function-name ${{ secrets.AWS_LAMBDA_BUILDER }}
      - name: Invoke Lambda function
        run: aws lambda invoke \
          --function-name ${{ secrets.AWS_LAMBDA_BUILDER }} \
          --invocation-type Event \
          --cli-binary-format raw-in-base64-out \
          --payload '{"update_all":true}' \
          /dev/stdout
